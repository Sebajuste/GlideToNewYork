[gd_resource type="VisualShader" load_steps=12 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=2]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.9, 0.9, 0.9 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=3]
function = 2

[sub_resource type="VisualShaderNodeVectorOp" id=4]

[sub_resource type="VisualShaderNodeInput" id=5]
output_port_for_preview = 0
input_name = "alpha"

[sub_resource type="VisualShaderNodeColorUniform" id=6]
output_port_for_preview = 0
uniform_name = "ColorUniform"

[sub_resource type="VisualShaderNodeInput" id=7]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id=8]
output_port_for_preview = 0
source = 1

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 0.9 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=10]

[sub_resource type="VisualShaderNodeVectorCompose" id=11]

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform vec4 ColorUniform : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:15
	vec3 n_out15p0 = ColorUniform.rgb;
	float n_out15p1 = ColorUniform.a;

// Input:4
	vec3 n_out4p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:8
	float n_out8p0 = n_out4p0.x;
	float n_out8p1 = n_out4p0.y;
	float n_out8p2 = n_out4p0.z;

// VectorCompose:9
	float n_in9p2 = 0.00000;
	vec3 n_out9p0 = vec3(n_out8p0, n_out8p1, n_in9p2);

// VectorOp:10
	vec3 n_in10p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out10p0 = n_out9p0 * n_in10p1;

// VectorFunc:12
	vec3 n_out12p0 = -(n_out10p0);

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out4p0.xy, 0.0);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// VectorOp:11
	vec3 n_in11p1 = vec3(0.90000, 0.90000, 0.90000);
	vec3 n_out11p0 = n_out5p0 * n_in11p1;

// VectorOp:13
	vec3 n_out13p0 = n_out12p0 + n_out11p0;

// Output:0
	ALBEDO = n_out15p0;
	ALPHA = n_out15p1;
	EMISSION = n_out13p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -273.635, 93 )
nodes/fragment/0/position = Vector2( 1560, 0 )
nodes/fragment/4/node = SubResource( 7 )
nodes/fragment/4/position = Vector2( -20, 40 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( 340, 80 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( 680, 140 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( 200, -60 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( 543, -71 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 761, -92 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 680, 260 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 972, -122 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 1160, 0 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 1220, 140 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 1340, -100 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 5, 0, 6, 0, 4, 0, 8, 0, 8, 0, 9, 0, 8, 1, 9, 1, 5, 0, 11, 0, 9, 0, 10, 0, 10, 0, 12, 0, 12, 0, 13, 0, 11, 0, 13, 1, 15, 0, 0, 0, 15, 1, 0, 1, 13, 0, 0, 5 )
