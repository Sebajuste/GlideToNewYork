[gd_resource type="PlaneMesh" load_steps=22 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=3]

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "speed"

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=6]

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=8]
uniform_name = "albedo"

[sub_resource type="VisualShaderNodeVec3Uniform" id=9]
uniform_name = "direction"

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 0.99

[sub_resource type="VisualShaderNodeScalarConstant" id=11]
constant = 0.1

[sub_resource type="VisualShaderNodeScalarConstant" id=12]
constant = 0.05

[sub_resource type="OpenSimplexNoise" id=13]

[sub_resource type="NoiseTexture" id=14]
noise = SubResource( 13 )

[sub_resource type="VisualShaderNodeTexture" id=15]
source = 5
texture = SubResource( 14 )

[sub_resource type="VisualShaderNodeTextureUniform" id=16]
uniform_name = "normalmap"

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "uv"

[sub_resource type="VisualShader" id=18]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform vec4 albedo : hint_color;
uniform float speed;
uniform vec3 direction;
uniform sampler2D normalmap;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:2
	vec3 n_out2p0 = albedo.rgb;
	float n_out2p1 = albedo.a;

// Input:9
	vec3 n_out9p0 = vec3(UV, 0.0);

// ScalarUniform:13
	float n_out13p0 = speed;

// Input:10
	float n_out10p0 = TIME;

// VectorOp:14
	vec3 n_out14p0 = vec3(n_out13p0) * vec3(n_out10p0);

// VectorUniform:3
	vec3 n_out3p0 = direction;

// VectorFunc:15
	vec3 n_out15p0 = normalize(n_out3p0);

// VectorOp:11
	vec3 n_out11p0 = n_out14p0 * n_out15p0;

// VectorOp:12
	vec3 n_out12p0 = n_out9p0 + n_out11p0;

// Texture:7
	vec3 n_out7p0;
	float n_out7p1;
	{
		vec4 normalmap_tex_read = texture(normalmap, n_out12p0.xy);
		n_out7p0 = normalmap_tex_read.rgb;
		n_out7p1 = normalmap_tex_read.a;
	}

// VectorOp:16
	vec3 n_out16p0 = n_out2p0 * n_out7p0;

// Scalar:4
	float n_out4p0 = 0.990000;

// Scalar:6
	float n_out6p0 = 0.050000;

// Scalar:5
	float n_out5p0 = 0.100000;

// Output:0
	ALBEDO = n_out16p0;
	ALPHA = n_out4p0;
	ROUGHNESS = n_out6p0;
	SPECULAR = n_out5p0;
	NORMALMAP = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 642.24, -150 )
nodes/fragment/0/position = Vector2( 1280, 40 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( 1020, -120 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( -180, 80 )
nodes/fragment/4/node = SubResource( 10 )
nodes/fragment/4/position = Vector2( 1020, 0 )
nodes/fragment/5/node = SubResource( 11 )
nodes/fragment/5/position = Vector2( 1020, 160 )
nodes/fragment/6/node = SubResource( 12 )
nodes/fragment/6/position = Vector2( 1020, 80 )
nodes/fragment/7/node = SubResource( 15 )
nodes/fragment/7/position = Vector2( 800, 200 )
nodes/fragment/8/node = SubResource( 16 )
nodes/fragment/8/position = Vector2( 540, 200 )
nodes/fragment/9/node = SubResource( 17 )
nodes/fragment/9/position = Vector2( 320, -80 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -180, -20 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 320, 40 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 580, 20 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -180, -100 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 120, -40 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 80, 80 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( 1200, -120 )
nodes/fragment/connections = PoolIntArray( 8, 2, 7, 2, 9, 0, 12, 0, 11, 0, 12, 1, 12, 0, 7, 0, 7, 0, 0, 8, 4, 0, 0, 1, 5, 0, 0, 4, 6, 0, 0, 3, 13, 0, 14, 0, 10, 0, 14, 1, 14, 0, 11, 0, 3, 0, 15, 0, 15, 0, 11, 1, 7, 0, 16, 1, 2, 0, 16, 0, 16, 0, 0, 0 )

[sub_resource type="OpenSimplexNoise" id=19]
octaves = 4

[sub_resource type="NoiseTexture" id=20]
seamless = true
as_normalmap = true
noise = SubResource( 19 )

[sub_resource type="ShaderMaterial" id=21]
shader = SubResource( 18 )
shader_param/albedo = Color( 0.105882, 0.219608, 0.392157, 1 )
shader_param/speed = 0.025
shader_param/direction = Vector3( 1, 0, 0 )
shader_param/normalmap = SubResource( 20 )

[resource]
material = SubResource( 21 )
size = Vector2( 1024, 1024 )
