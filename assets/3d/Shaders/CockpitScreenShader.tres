[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "RenderTarget"
texture_type = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=2]
uniform_name = "intensity"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D RenderTarget : hint_albedo;
uniform float intensity;



void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(RenderTarget, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// ScalarUniform:3
	float n_out3p0 = intensity;

// VectorOp:4
	vec3 n_out4p0 = vec3(n_out3p0) * n_out2p0;

// Output:0
	ALBEDO = n_out2p0;
	EMISSION = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -115.816, 150 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -60, 220 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -40, 140 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 180, 260 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 1, 3, 0, 4, 0, 4, 0, 0, 5, 2, 0, 0, 0 )
